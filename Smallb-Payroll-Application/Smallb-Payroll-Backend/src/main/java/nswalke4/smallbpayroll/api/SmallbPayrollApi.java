package nswalke4.smallbpayroll.api;

import java.io.IOException;
import java.util.Map;
import java.util.stream.Collectors;

import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import nswalke4.smallbpayroll.util.database.DatabaseProperties;
import org.json.JSONException;
import org.json.JSONObject;

/**
 * This class is the Smallb Payroll REST API which allows the front end to execute commands on the
 * back end of the Smallb Payroll Application.
 * 
 * @author Nicholas Walker (nswalke4@asu.edu)
 * @version 1.07
 */
public class SmallbPayrollApi extends HttpServlet {

	// Class Variables
	private static final long serialVersionUID = -7174927741311355125L;
	private final String JSON_CONTENT = "application/json";

	// Constructor
	/**
	 * This creates a SmallbPayrollApi object using its parent's (javax.servlet.http.HttpServlet)
	 * constructor.
	 */
	public SmallbPayrollApi() {
		super();
		new DatabaseProperties();
	}

	// Class Methods (Overrides)
	/**
	 * Initializes the Smallb Payroll Servlet to be able to accept http methods.
	 */
	@Override
	public void init(ServletConfig config) throws ServletException {
		super.init(config);
	}

	/**
	 * Handles all of the requests that come in via a "get" request.
	 */
	@Override
	public void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		System.out.println("\n------------------------------------------------------------");
		System.out.println("   ~Received a new \"GET\" request...");
		response.setContentType(JSON_CONTENT);
		JSONObject responseObj = new JSONObject();
		if (request.getHeader("Authorization") != null) {
			System.out.println("     -Authorization Header Included");
			Map<String, String[]> params = request.getParameterMap();
			if (params.isEmpty()) {
				System.out.println("     -No Params");
				System.out.println("     = Gathering account info...");
				String accountSub = request.getHeader("Authorization");
				responseObj = SmallbPayrollMethods.gatherAccountInformation(accountSub);
			} else if (params.size() == 1) {
				if (params.containsKey("EmployeeId")) {
					String employeeId = params.get("EmployeeId")[0];
					System.out.println("     -Param - EmployeeId: " + employeeId);
					System.out.println("     = Gathering employee timecards...");
					responseObj = SmallbPayrollMethods.gatherEmployeeTimecards(employeeId);
				} else if (params.containsKey("PayPeriodId")) {
					String periodId = params.get("PayPeriodId")[0];
					System.out.println("     -Param - PayPeriodId: " + periodId);
					System.out.println("     = Gathering pay period timecards...");
					responseObj = SmallbPayrollMethods.gatherPayPeriodTimecards(periodId);
				} else {
					System.out.println("     !FAILURE!\n       -Received Invalid Parameters");
					responseObj.put("Failure", "Invalid Parameters");
					responseObj.put("ErrorMessage",
							"The given parameter is unknown.  The only valid parameters for a 'get' method are either 'EmployeeId' or 'PayPeriodId'.");
				}
			} else {
				System.out.println("     !FAILURE!\n       -Received Too Many Parameters");
				responseObj.put("Failure", "Invalid Parameters");
				responseObj.put("ErrorMessage",
						"The given parameters do not provide a valid 'get' request.  A valid 'get' request can have either 0 or 1 parameter.");
			}
			if (responseObj.has("Failure")) {
				response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
			} else {
				response.setStatus(HttpServletResponse.SC_OK);
			}
		} else {
			System.out.println("     !FAILURE!\n       -Authorization Header not included");
			response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
			responseObj.put("Failure", "Authorization Not Found");
			responseObj.put("ErrorMessage",
					"The 'Authorization' header was not found and is required.  Make sure that your header includes the 'Authorization' tag with the value being your 'AccountSub' generated by AWS Cognito.");
		}
		System.out.println("   ~Response:\n" + responseObj.toString());
		System.out.println("------------------------------------------------------------");
		response.getWriter().println(responseObj.toString());
	}

	/**
	 * Handles all of the requests that come in via a "post" request.
	 */
	@Override
	public void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		System.out.println("\n------------------------------------------------------------");
		System.out.println("   ~Received a new \"POST\" request...");
		response.setContentType(JSON_CONTENT);
		JSONObject responseObj = new JSONObject();
		if (request.getContentType() != null) {
			if (request.getContentType().equals(JSON_CONTENT)) {
				System.out.println("     -Content Type is '" + JSON_CONTENT + "'");
				if (request.getHeader("Authorization") != null) {
					System.out.println("     -Authorization Header Included");
					String accountSub = request.getHeader("Authorization");
					try {
						JSONObject requestObj = new JSONObject(
								request.getReader().lines().collect(Collectors.joining()));
						if (requestObj.has("Method")) {
							String method = requestObj.getString("Method");
							System.out.println("     -Method: " + method);
							switch (method) {

								case "CreateNewAccount":
									if (requestObj.has("NewAccount")) {
										System.out.println("     -Param: NewAccount JSONObject");
										JSONObject newAccountObj =
												requestObj.getJSONObject("NewAccount");
										if ((newAccountObj.has("Name"))
												&& (newAccountObj.has("Email"))
												&& (newAccountObj.has("PayPeriodType"))) {
											System.out.println("        +NewAccountObject: Valid");
											System.out.println(
													"     = Trying to Create New Account...");
											responseObj = SmallbPayrollMethods
													.createNewAccount(accountSub, newAccountObj);
											if (responseObj.has("Failure")) {
												response.setStatus(
														HttpServletResponse.SC_BAD_REQUEST);
											} else {
												response.setStatus(HttpServletResponse.SC_CREATED);
											}
										} else {
											System.out
													.println("        +NewAccountObject: INVALID");
											System.out.println(
													"     !FAILURE!\n       -NewAccount Object Params are Invalid");
											response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
											responseObj.put("Failure", "Invalid Parameters");
											responseObj.put("ErrorMessage",
													"The 'NewAccount' object must have the following parameters: Name, Email, PayPeriodType");
										}
									} else {
										System.out.println(
												"     !FAILURE!\n       -No NewAccount JSONObject");
										response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
										responseObj.put("Failure", "Invalid Parameters");
										responseObj.put("ErrorMessage",
												"Object for 'NewAccount' was not found and is a required parameter for this method");
									}
									break;

								case "CreateNewEmployee":
									if ((requestObj.has("NewEmployee"))) {
										System.out.println("     -Param: NewEmployee JSONObject");
										JSONObject newEmployeeObj =
												requestObj.getJSONObject("NewEmployee");
										if ((newEmployeeObj.has("FirstName"))
												&& (newEmployeeObj.has("LastName"))
												&& (newEmployeeObj.has("EmpType"))
												&& (newEmployeeObj.has("PayRate"))) {
											System.out.println("        +NewEmployeeObject: Valid");
											System.out.println(
													"     = Trying to Create New Employee...");
											responseObj = SmallbPayrollMethods
													.createNewEmployee(accountSub, newEmployeeObj);
											if (responseObj.has("Failure")) {
												response.setStatus(
														HttpServletResponse.SC_BAD_REQUEST);
											} else {
												response.setStatus(HttpServletResponse.SC_CREATED);
											}
										} else {
											System.out
													.println("        +NewEmployeeObject: INVALID");
											System.out.println(
													"     !FAILURE!\n       -NewEmployee Object Params are Invalid");
											response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
											responseObj.put("Failure", "Invalid Parameters");
											responseObj.put("ErrorMessage",
													"The 'NewEmployee' object must have the following parameters: FirstName, LastName, EmpType, PayRate");
										}
									} else {
										System.out.println(
												"     !FAILURE!\n       -No NewEmployee JSONObject");
										response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
										responseObj.put("Failure", "Invalid Parameters");
										responseObj.put("ErrorMessage",
												"Object for 'NewEmployee' was not found and is a required parameter for this method.");

									}
									break;

								case "CreateNewPayPeriod":
									if ((requestObj.has("PeriodStartDate"))) {
										System.out.println("     -Param: PeriodStartDate String");
										System.out
												.println("     = Trying to Create New Pay Period");
										responseObj =
												SmallbPayrollMethods.createNewPayPeriod(accountSub,
														requestObj.getString("PeriodStartDate"));
										if (responseObj.has("Failure")) {
											response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
										} else {
											response.setStatus(HttpServletResponse.SC_CREATED);
										}
									} else {
										System.out.println(
												"     !FAILURE!\n       -No PeriodStartDate String");
										response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
										responseObj.put("Failure", "Invalid Parameters");
										responseObj.put("ErrorMessage",
												"String for 'PeriodStartDate' was not found and is a required parameter for this method.");

									}
									break;

								case "CreateNewTimecard":
									if ((requestObj.has("TimecardInfo"))) {
										System.out.println("     -Param: TimecardInfo JSONObject");
										JSONObject timecardObj =
												requestObj.getJSONObject("TimecardInfo");
										if ((timecardObj.has("EmployeeId"))
												&& (timecardObj.has("PeriodId"))
												&& (timecardObj.has("RegularHours"))
												&& (timecardObj.has("OvetimeHours"))
												&& (timecardObj.has("BonusPay"))
												&& (timecardObj.has("OtherPay"))) {
											System.out
													.println("        +TimecardInfoObject: Valid");
											System.out.println(
													"     = Tyring to Create New Timecard...");
											responseObj = SmallbPayrollMethods
													.createNewTimecard(accountSub, timecardObj);
											if (responseObj.has("Failure")) {
												response.setStatus(
														HttpServletResponse.SC_BAD_REQUEST);
											} else {
												response.setStatus(HttpServletResponse.SC_CREATED);
											}
										} else {
											System.out.println(
													"        +TimecardInfoObject: INVALID");
											System.out.println(
													"     !FAILURE!\n     -TimecardInfo Object Params are Invalid");
											response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
											responseObj.put("Failure", "Invalid Parameters");
											responseObj.put("ErrorMessage",
													"The 'TimecardInfo' object must have the following parameters: EmployeeId, PeriodId, RegularHours, OvertimeHours, BonusPay, OtherPay");
										}
									} else {
										System.out.println(
												"     !FAILURE!\n     -No TimecardInfo JSONObject");
										response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
										responseObj.put("Failure", "Invalid Parameters");
										responseObj.put("ErrorMessage",
												"Object for 'TimecardInfo' was not found and is a required parameter for this method.");
									}
									break;

								default:
									System.out.println(
											"     !FAILURE!\n     -Given 'Method' parameter does not match available methods");
									response.setStatus(HttpServletResponse.SC_NOT_FOUND);
									responseObj.put("Failure", "Method Not Found");
									responseObj.put("ErrorMessage",
											"The client's requested 'POST' method was not found as a valid method on this server.");
									break;

							}
						} else {
							System.out
									.println("     !FAILURE!\n     -No Method parameter was found");
							response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
							responseObj.put("Failure", "Invalid Parameters");
							responseObj.put("ErrorMessage",
									"The 'Method' parameter is required in order to properly execute the requested command.");
						}
					} catch (JSONException jsex) {
						System.out.println("     !FAILURE!\n     -Body of Request Not Included");
						response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
						responseObj.put("Failure", "Body Not Found");
						responseObj.put("ErrorMessage",
								"The body of the request was not found and is required.  Make sure that you include a body with the necessary parameters when making a 'post' method call.");
					}
				} else {
					System.out.println("     !FAILURE!\n       -Authorization Header not included");
					response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
					responseObj.put("Failure", "Authorization Not Found");
					responseObj.put("ErrorMessage",
							"The 'Authorization' header was not found and is required.  Make sure that your header includes the 'Authorization' tag with the value being your 'AccountSub' generated by AWS Cognito.");
				}
			} else {
				System.out
						.println("     !FAILURE!\n       -Content Type not '" + JSON_CONTENT + "'");
				response.setStatus(HttpServletResponse.SC_UNSUPPORTED_MEDIA_TYPE);
				responseObj.put("Failure", "Invalid Content Type");
				responseObj.put("ErrorMessage",
						"The content type of the request cannot be properly handled.  Currently, this server can only accept '"
								+ JSON_CONTENT + "' as the request content-type.");
			}
		} else {
			System.out.println("     !FAILURE!\n     -Content Type not included");
			response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
			responseObj.put("Failure", "Content-Type Header Not Found");
			responseObj.put("ErrorMessage",
					"The header for 'content-type' must be included in your request.");
		}
		System.out.println("   ~Response:\n" + responseObj.toString());
		System.out.println("------------------------------------------------------------");
		response.getWriter().println(responseObj.toString());
	}

	/**
	 * Handles all of the requests that come in via a "put" request.
	 */
	@Override
	public void doPut(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		System.out.println("\n------------------------------------------------------------");
		System.out.println("   ~Received a new \"PUT\" request...");
		System.out.println(
				"     !FAILURE!\n     -Currently the \"PUT\" requests are not implemented...");
		response.setContentType(JSON_CONTENT);
		JSONObject responseObj = new JSONObject();
		response.setStatus(HttpServletResponse.SC_NOT_IMPLEMENTED);
		responseObj.put("Failure", "Not Implemented");
		responseObj.put("ErrorMessage",
				"Currently, this servlet does not have the 'put' method implemented, so the request cannot be completed.  Please try again once the server has updated the API to accept these requests.");
		System.out.println("   ~ Response:\n" + responseObj.toString());
		System.out.println("------------------------------------------------------------");
		response.getWriter().println(responseObj.toString());
	}

	/**
	 * Handles all of the requests that come in via a "delete" request.
	 */
	@Override
	public void doDelete(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		System.out.println("\n------------------------------------------------------------");
		System.out.println("   ~Received a new \"DELETE\" request...");
		System.out.println(
				"     !FAILURE!\n     -Currently the \"DELETE\" requests are not implemented...");
		response.setContentType(JSON_CONTENT);
		JSONObject responseObj = new JSONObject();
		response.setStatus(HttpServletResponse.SC_NOT_IMPLEMENTED);
		responseObj.put("Failure", "Not Implemented");
		responseObj.put("ErrorMessage",
				"Currently, this servlet does not have the 'delete' method implemented, so the request cannot be completed.  Please try again once the server has updated the API to accept these requests.");
		System.out.println("   ~ Response:\n" + responseObj.toString());
		System.out.println("------------------------------------------------------------");
		response.getWriter().println(responseObj.toString());
	}
}
